
 Create FUNCTION getRoleId(
 @idMember BIGINT
 )
 RETURNS INT
 AS
BEGIN
DECLARE @RoleName varchar(50);
 select @RoleName=  [roleid] from member where MEMBER.Id = @idMember
 RETURN @RoleName
END;


CREATE TABLE PRODUCT(
Id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
Name VARCHAR(100) NOT NULL,
Amount DECIMAL(12,6)
)

CREATE TABLE [ROLE](
Id INT  PRIMARY KEY IDENTITY(1,1) NOT NULL,
Name VARCHAR(50)
)

CREATE TABLE StatusProductOrder(
id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
Name VARCHAR(50)
)

CREATE TABLE StatusOrder(
id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
Name VARCHAR(50)
)


 CREATE TABLE MEMBER(
 Id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
 FirstName VARCHAR(50),
 LastName VARCHAR(50),
 [RoleId] INT FOREIGN KEY REFERENCES [ROLE](Id),
 )




CREATE TABLE [CafeTABLE](
Id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
Name VARCHAR(100),
WaiterID BIGINT FOREIGN KEY REFERENCES MEMBER(Id) CHECK(dbo.getRoleId(WaiterID) = 2),
)


CREATE TABLE [ORDER](
Id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
Number INT NOT NULL,
StatusId BIGINT FOREIGN KEY REFERENCES StatusOrder(Id),
TableId  BIGINT FOREIGN KEY REFERENCES [CafeTABLE](Id)
)

CREATE TABLE PRODUCTORDER(
Id BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
OrderID BIGINT FOREIGN KEY REFERENCES [ORDER](Id) NOT NULL,
ProductId BIGINT FOREIGN KEY REFERENCES PRODUCT(Id) NOT NULL,
TableId BIGINT FOREIGN KEY REFERENCES [CafeTABLE](Id) NOT NULL,
[ProductCount] INT NOT NULL,
StatusID BIGINT FOREIGN KEY REFERENCES StatusProductOrder(Id)
)

insert into StatusOrder values('ACTIVE'),('CENCELLED'),('CLOSE')
insert into StatusProductOrder values('ACTIVE'),('CENCELLED'),('CLOSE')
insert into [ROLE] values('USER'),('WAITER'),('MANAGER')